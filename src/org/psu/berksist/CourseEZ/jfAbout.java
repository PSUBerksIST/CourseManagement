/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.psu.berksist.CourseEZ;

import java.io.*;
import javax.swing.JOptionPane;

/**
 *
 * @author jss5783
 * 
 * 
 * 
 *  ******************* MODIFICATION LOG *****************************************
 * 2017 March 31 -  Cleaned up code (added try... catch; comments; etc.).
 *                  Labels now update with program name and program version from AppConstants constants.
 *                  -BUG: Fixed bug with licenses.txt (there was an empty line).
 *                  +BUG: Loading a long file results in the textbox being scrolled to the bottom.
 *                  Can have 0+ methods of contact for contributors.
 *                  Most library licenses added to licenses.txt.
 *                  Some students' emails added to contributors.txt
 *                      (somewhat obfuscated to try to prevent spambots scraping the file). -JSS
 * 2017 March 30 -  Cleaned up rbtnContributorsActionPerformed code.
 *                  Removed rbtnChangelog, associated code, and TXT file.
 *                  Added rbtnTools and associated code.
 *                  Added lblDescription.
 *                  Changed rbtnLicenses to rbtnLibraries and associated code and TXT file.
 *                  +BUG: Doesn't read licenses.txt.    -JSS
 * 2017 March 29 -  Created jfAbout.java. Added basic rough functionality. - JSS
 */
public class jfAbout extends javax.swing.JFrame {

    /**
     * Creates new form jfAbout
     */
    public jfAbout() {
        initComponents();
        
        //Updates labels with program name and version number
        lblProgramName.setText(AppConstants.APP_ID);
        lblVersionNumber.setText("Version: " + AppConstants.APP_VERSION);
        
        //register radio buttons to button group
        bgrpAbout.add(rbtnTools);
        bgrpAbout.add(rbtnContributors);
        bgrpAbout.add(rbtnLibraries);
        
        rbtnContributors.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrpAbout = new javax.swing.ButtonGroup();
        jpText = new javax.swing.JPanel();
        jpAboutTitle = new javax.swing.JPanel();
        lblVersionNumber = new javax.swing.JLabel();
        lblProgramName = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jspText = new javax.swing.JScrollPane();
        jtpText = new javax.swing.JTextPane();
        jpRadioButtons = new javax.swing.JPanel();
        rbtnTools = new javax.swing.JRadioButton();
        rbtnLibraries = new javax.swing.JRadioButton();
        rbtnContributors = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblVersionNumber.setText("VERSION_NUMBER");

        lblProgramName.setFont(new java.awt.Font("DejaVu Sans", 0, 24)); // NOI18N
        lblProgramName.setText("PROGRAM_NAME");

        lblDescription.setText("An open-source program for managing courses for teachers.");

        javax.swing.GroupLayout jpAboutTitleLayout = new javax.swing.GroupLayout(jpAboutTitle);
        jpAboutTitle.setLayout(jpAboutTitleLayout);
        jpAboutTitleLayout.setHorizontalGroup(
            jpAboutTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAboutTitleLayout.createSequentialGroup()
                .addGroup(jpAboutTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAboutTitleLayout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(lblVersionNumber))
                    .addGroup(jpAboutTitleLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(lblDescription)))
                .addContainerGap(131, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAboutTitleLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblProgramName)
                .addGap(248, 248, 248))
        );
        jpAboutTitleLayout.setVerticalGroup(
            jpAboutTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAboutTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblProgramName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblVersionNumber)
                .addGap(18, 18, 18)
                .addComponent(lblDescription)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jspText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspText.setViewportView(jtpText);

        javax.swing.GroupLayout jpTextLayout = new javax.swing.GroupLayout(jpText);
        jpText.setLayout(jpTextLayout);
        jpTextLayout.setHorizontalGroup(
            jpTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpTextLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jspText)
                    .addComponent(jpAboutTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpTextLayout.setVerticalGroup(
            jpTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpTextLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jpAboutTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jspText, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jpText, java.awt.BorderLayout.PAGE_START);

        rbtnTools.setText("Tools");
        rbtnTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnToolsActionPerformed(evt);
            }
        });

        rbtnLibraries.setText("Libraries");
        rbtnLibraries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnLibrariesActionPerformed(evt);
            }
        });

        rbtnContributors.setText("Contributors");
        rbtnContributors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnContributorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRadioButtonsLayout = new javax.swing.GroupLayout(jpRadioButtons);
        jpRadioButtons.setLayout(jpRadioButtonsLayout);
        jpRadioButtonsLayout.setHorizontalGroup(
            jpRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRadioButtonsLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(rbtnContributors)
                .addGap(107, 107, 107)
                .addComponent(rbtnLibraries)
                .addGap(101, 101, 101)
                .addComponent(rbtnTools)
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jpRadioButtonsLayout.setVerticalGroup(
            jpRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRadioButtonsLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jpRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnTools)
                    .addComponent(rbtnLibraries)
                    .addComponent(rbtnContributors))
                .addContainerGap())
        );

        getContentPane().add(jpRadioButtons, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Loads tools.txt into jtpText.
     * @param evt 
     */
    private void rbtnToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnToolsActionPerformed
        try
        {
            File fTools = new File(AppConstants.ROOT_FOLDER + "tools.txt");     //this doesn't mean the file actually exists - it just points to where it should be
            if (fTools.exists() == true)    //if tools.txt does exist
            {
                try     //can file can be opened?
                {
                    BufferedReader reader = new BufferedReader(new FileReader(fTools));
                    String strInput = new String();
                    String strFile = new String("===List of tools used===\n");
                    try     //can file's contents be read and processed?
                    {
                        while ((strInput = reader.readLine()) != null)
                        {
                            String[] astrInput = strInput.split(";");
                            strFile += astrInput[0] + " (" + astrInput[1] + "): " + astrInput[2] + "\n";
                        }
                        jtpText.setText(strFile);
                        jspText.getVerticalScrollBar().setValue(1);
                        reader.close();
                    }
                    catch (IOException e)   //if there's a problem reading a line in the file
                    {
                        JOptionPane.showMessageDialog(null, "Error reading tools.txt.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch (IOException e)   //should open if file can't be opened
                {
                    JOptionPane.showMessageDialog(null, "tools.txt cannot be opened.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else    //if tools.txt does NOT exist
            {
                JOptionPane.showMessageDialog(null, "tools.txt cannot be found.","Error", JOptionPane.ERROR_MESSAGE);
            }
        jspText.getVerticalScrollBar().setValue(1);
        }
        catch (Exception e) //generic exception
        {
            JOptionPane.showMessageDialog(null, e.toString(),"Error", JOptionPane.ERROR_MESSAGE); //should print stack trace to message box
        }
    }//GEN-LAST:event_rbtnToolsActionPerformed

    /**
     * Loads contributors.txt into jtpText.
     * Contributors are listed as "[first name] [last name] ([contact information])".
     * The project head's name is listed first and indicated as such.
     * File format is: "[FirstName];[LastName]", followed by one or more methods of contact (separated by semi-colons).
     * Example (without double-quotes): "John;Doe;jdd123SPAMBOTFAKEOUTREMOVEME@notarealwebsite.com;notarealwebsite.no/jdd123".
     * Any emails are suggested to add "SPAMBOTFAKEOUTREMOVEME" before the @ symbol to try to prevent scraping by spambots,
     * but this is not required.
     * @param evt 
     */
    private void rbtnContributorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnContributorsActionPerformed
        //TODO: Fix rough code up, add comments, add more/more detailed exceptions
        //TODO: Is there a way to check for the filepath without needing a /case-sensitive/ file extension attached?
        try
        {
            File fContributors = new File(AppConstants.ROOT_FOLDER + "contributors.txt");     //this doesn't mean the file actually exists - it just points to where it should be
            if (fContributors.exists() == true)    //if tools.txt does exist
            {
                try     //can file can be opened?
                {
                    BufferedReader reader = new BufferedReader(new FileReader(fContributors));
                    String strInput = new String();
                    String strFile = new String("===List of all contributors (and contact information)===\n");
                    String strContactMethods = new String();
                    try     //can file's contents be read and processed?
                    {
//                String strFirstName = new String();
//                String strLastName = new String();
//                String strGitHubAccount = new String();
                        while ((strInput = reader.readLine()) != null)
                        {
                            String[] astrInput = strInput.split(";");
                            if (astrInput.length > 2)   //if there's more than a first name and last name
                            {
                                strContactMethods = "";
                                for (int i = 2; i < astrInput.length; i++)
                                {
                                    strContactMethods += astrInput[i];
                                    if (i < astrInput.length - 1)   //if not the last method of contact, add a comma for spacing
                                    {
                                        strContactMethods += ", ";
                                    }
                                }
                                strFile += astrInput[0] + " " + astrInput[1] + " (" + strContactMethods + ")\n";
                            }
                            else
                            {
                                strFile += astrInput[0] + " " + astrInput[1] + "\n";
                            }
    //                    strFile += strFirstName + " " + strLastName + " (" + strGitHubAccount + ")\n";
    //                    strFirstName = strInput.substring(0, strInput.indexOf(',') );
    //                    strLastName = strInput.substring(strInput.indexOf(',') + 1, strInput.lastIndexOf(',') );
    //                    strGitHubAccount = strInput.substring(strInput.lastIndexOf(',') + 1, strInput.length() - 1);
    //                    strFile += strFirstName + " " + strLastName + " (" + strGitHubAccount + ")\n";
                        }
                        //Removes anti-spambot-scraping from the string.
                        strFile = strFile.replaceAll("SPAMBOTFAKEOUTREMOVEME", "");
                        jtpText.setText(strFile);
                        jspText.getVerticalScrollBar().setValue(1);
                        reader.close();
                    }
                    catch (IOException e)   //if there's a problem reading a line in the file
                    {
                        JOptionPane.showMessageDialog(null, "Error reading contributors.txt.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch (IOException e)   //should open if file can't be opened
                {
                    JOptionPane.showMessageDialog(null, "contributors.txt cannot be opened.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else    //if contributors.txt does NOT exist
            {
                JOptionPane.showMessageDialog(null, "contributors.txt cannot be found.","Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception e) //generic exception
        {
            JOptionPane.showMessageDialog(null, e.toString(),"Error", JOptionPane.ERROR_MESSAGE); //should print stack trace to message box
        }
    }//GEN-LAST:event_rbtnContributorsActionPerformed

    /**
     * Loads libraries.txt into jtpText.
     * Course Management's license at the top.
     * libraries.txt is the list of of libraries and what licenses they operate under, basically; any required license texts (e.g.,
     * Apache License v2.0's short license, which in turn points to the full license online) are included
     * separately in the resources folder itself.
     * @param evt 
     */
    private void rbtnLibrariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnLibrariesActionPerformed
        try
        {
            File fLibraries = new File(AppConstants.ROOT_FOLDER + "libraries.txt");     //this doesn't mean the file actually exists - it just points to where it should be
            if (fLibraries.exists() == true)    //if tools.txt does exist
            {
                try     //can file can be opened?
                {
                    BufferedReader reader = new BufferedReader(new FileReader(fLibraries));
                    String strInput = new String();
                    String strFile = new String("===List of libraries used===\n");
                    try     //can file's contents be read and processed?
                    {
                        while ((strInput = reader.readLine()) != null)
                        {
                            String[] astrInput = strInput.split(";");                            
                            strFile += astrInput[0] + " (" + astrInput[1] + ")\n-" + astrInput[2] + " (" + astrInput[3] + ")\n-" + astrInput[4] + "\n\n";
                        }
                        jtpText.setText(strFile);
                        jspText.getVerticalScrollBar().setValue(1);
                        reader.close();
                    }
                    catch (IOException e)   //if there's a problem reading a line in the file
                    {
                        JOptionPane.showMessageDialog(null, "Error reading libraries.txt.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch (IOException e)   //should open if file can't be opened
                {
                    JOptionPane.showMessageDialog(null, "libraries.txt cannot be opened.\n" + e.toString(),"Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            else    //if libraries.txt does NOT exist
            {
                JOptionPane.showMessageDialog(null, "libraries.txt cannot be found.","Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception e) //generic exception
        {
            JOptionPane.showMessageDialog(null, e.toString(),"Error", JOptionPane.ERROR_MESSAGE); //should print stack trace to message box
        }
    }//GEN-LAST:event_rbtnLibrariesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrpAbout;
    private javax.swing.JPanel jpAboutTitle;
    private javax.swing.JPanel jpRadioButtons;
    private javax.swing.JPanel jpText;
    private javax.swing.JScrollPane jspText;
    private javax.swing.JTextPane jtpText;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblProgramName;
    private javax.swing.JLabel lblVersionNumber;
    private javax.swing.JRadioButton rbtnContributors;
    private javax.swing.JRadioButton rbtnLibraries;
    private javax.swing.JRadioButton rbtnTools;
    // End of variables declaration//GEN-END:variables
}
